{% extends '@EasyAdmin/page/content.html.twig' %}
{% block content_title %}{{ course.title }}{% endblock %}
{% block page_actions %}
    <a class="btn btn-primary" id="save_course_button" href="">Сохранить</a>
    <a class="btn btn-secondary" href="{{ ea_url().setController('App\\Controller\\Admin\\CourseCrudController').setAction('edit').setEntityId(course.id)}}">Назад к курсу</a>
{% endblock %}
{% block main %}
    <form action="{{ ea_url().setRoute('editCourse', {id: course.id}) }}" method="post" id="content_save">
        <textarea name="content" id="content"></textarea>
    </form>
    <script src="assets/js/tinymce/tinymce.min.js"></script>
    <script>
        const image_uploader = (blobInfo, progress) => new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.withCredentials = false;
            xhr.open('POST', '/admin/upload');

            xhr.upload.onprogress = (e) => {
                progress(e.loaded / e.total * 100);
            };

            xhr.onload = () => {
                if (xhr.status === 403) {
                    reject({ message: 'HTTP Error: ' + xhr.status, remove: true });
                    return;
                }

                if (xhr.status < 200 || xhr.status >= 300) {
                    reject('HTTP Error: ' + xhr.status);
                    return;
                }

                const json = JSON.parse(xhr.responseText);

                if (!json || typeof json.location != 'string') {
                    reject('Invalid JSON: ' + xhr.responseText);
                    return;
                }

                resolve(json.location);
            };

            xhr.onerror = () => {
                reject('Image upload failed due to a XHR Transport error. Code: ' + xhr.status);
            };

            const formData = new FormData();
            formData.append('file', blobInfo.blob(), blobInfo.filename());

            xhr.send(formData);
        });


        const editor = tinymce.init({
            selector: 'textarea#content',
            height: 1000,
            plugins: [
                'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                'insertdatetime', 'media', 'table', 'help', 'wordcount'
            ],
            toolbar: 'undo redo | blocks | ' +
                'bold italic backcolor | alignleft aligncenter ' +
                'alignright alignjustify | bullist numlist outdent indent | ' +
                'removeformat | help',
            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }',
            setup: function (editor) {
                editor.on('init', function () {
                    // Установка контента после инициализации редактора
                    editor.setContent(`{{ course.text|escape('js') }}`);
                });
            },
            automatic_uploads: true,
            file_picker_types: 'image',
            images_upload_handler: image_uploader
        });

        const saveButton = document.getElementById('save_course_button')
        const form = document.getElementById('content_save')

        saveButton.addEventListener('click', function(event) {
            event.preventDefault()
            form.submit()
        })
    </script>
{% endblock %}
